<?xml version="1.0" encoding="UTF-8"?>
<plugin name="Приватный профиль" version_long="10000" version_human="1.0.0" author="siv1987" website="http://ipbskins.ru/forum/" update_check="http://ipbskins.ru/forum/files/updatecheck/privateprofile/"><hooks><hook type="S" class="\IPS\Theme\class_core_front_profile" filename="profileHeaderButton"><![CDATA[//<?php

/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	exit;
}

class hook60 extends _HOOK_CLASS_
{

/* !Hook Data - DO NOT REMOVE */
public static function hookData() {
 return array_merge_recursive( array (
  'profileHeader' => 
  array (
    0 => 
    array (
      'selector' => 'ul#elEditProfile',
      'type' => 'add_inside_start',
      'content' => '				<li>
					<a href=\'{$member->url()->setQueryString( \'do\', \'privacy\' )}\' class=\'ipsButton ipsButton_small ipsButton_overlaid\' data-ipsDialog data-ipsDialog-modal=\'true\' data-ipsdialog-size=\'medium\' data-ipsDialog-title=\'{lang="profile_private_title"}\'>
						<i class=\'fa fa-{{if !$member->profile_private AND !$member->profile_ban_members}}un{{endif}}lock\'></i> <span class=\'ipsResponsive_hidePhone ipsResponsive_inline\'>  {lang="profile_private_privacy"}</span>
					</a>
				</li>',
    ),
  ),
), parent::hookData() );
}
/* End Hook Data */


}
]]></hook><hook type="C" class="\IPS\core\modules\front\members\profile" filename="profilePrivate"><![CDATA[//<?php

/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	exit;
}

class hook61 extends _HOOK_CLASS_
{

	/**
	 * Main execute entry point - used to override breadcrumb
	 *
	 * @return void
	 */
	public function execute()
	{
		try
		{
			$this->member = \IPS\Member::load( \IPS\Request::i()->id );
			if( $this->member->member_id AND \IPS\Member::loggedIn()->member_id !== $this->member->member_id AND !\IPS\Member::loggedIn()->isAdmin() )
			{
				switch( $this->member->profile_private )
				{
					case 1:
						if( !\IPS\Member::loggedIn()->member_id )
						{
							\IPS\Output::i()->error( 'profile_private_members', 'PP/1', 403 );
						}
					break;
					case 2:
						if( !\IPS\Member::loggedIn()->member_id OR !iterator_to_array( \IPS\Db::i()->select( 'follow_member_id', 'core_follow', array( 'follow_app=? AND follow_area=? AND follow_rel_id=? AND follow_member_id=?', 'core', 'member', $this->member->member_id, \IPS\Member::loggedIn()->member_id ) ) )[0] )
						{
							\IPS\Output::i()->error( 'profile_private_followers', 'PP/2', 403 );
						}
					break;
					case 3:
						\IPS\Output::i()->error( 'profile_private_locked', 'PP/3', 403 );
					break;
				}
				
				if( $this->member->profile_ban_members AND in_array( \IPS\Member::loggedIn()->member_id, explode( ',', $this->member->profile_ban_members ) ) )
				{
					\IPS\Output::i()->error( 'profile_private_banned', 'PP/4', 403 );
				}
			}
			
			parent::execute();
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}
	
	/*
	 * Private profile
	 *
	 * @return void
	 */
	public function privacy()
	{
		try
		{
			if( !\IPS\Member::loggedIn()->modPermission('can_modify_profiles') and ( \IPS\Member::loggedIn()->member_id !== $this->member->member_id or !$this->member->group['g_edit_profile'] ) )
			{
				\IPS\Output::i()->error( 'no_permission_edit_profile', 'PP/10', 403 );
			}
		
			$form = new \IPS\Helpers\Form;
			$form->add( new \IPS\Helpers\Form\Radio( 'profile_private', $this->member->profile_private, TRUE, array( 'options' => array( 
				0 => 'profile_private_0',
				1 => 'profile_private_1',
				2 => 'profile_private_2',
				3 => 'profile_private_3'
			) ) ) );
			
			$ban_members = $this->member->profile_ban_members ? array_filter( explode( ',', $this->member->profile_ban_members ), 'intval' ) : NULL;
			$form->add( new \IPS\Helpers\Form\Member( 'profile_ban_members', $ban_members ? iterator_to_array( \IPS\Db::i()->select( 'name', 'core_members', \IPS\Db::i()->in( 'member_id', $ban_members ) ) ) : NULL, FALSE, array( 'multiple' => 0 ) ) );
			
			if( $values = $form->values() )
			{
				$this->member->profile_private = intval( $values['profile_private'] );
				
				if( is_array( $values['profile_ban_members'] ) )
				{
					$this->member->profile_ban_members = implode( ',', array_filter( array_keys( $values['profile_ban_members'] ), 'intval' ) );
				}
				
				$this->member->save();
				
				\IPS\Output::i()->redirect( $this->member->url(), 'saved' );
			}
			
			\IPS\Output::i()->title = \IPS\Member::loggedIn()->language()->addToStack( 'profile_private_title' );
			
			if ( \IPS\Request::i()->isAjax() )
			{
				\IPS\Output::i()->output = $form->customTemplate( array( call_user_func_array( array( \IPS\Theme::i(), 'getTemplate' ), array( 'forms', 'core' ) ), 'popupTemplate' ) );
			}
			else
			{
				\IPS\Output::i()->output = \IPS\Theme::i()->getTemplate( 'forms', 'core' )->editContentForm( \IPS\Member::loggedIn()->language()->addToStack( 'profile_private_title' ), $form );
			}
		}
		catch ( \RuntimeException $e )
		{
			if ( method_exists( get_parent_class(), __FUNCTION__ ) )
			{
				return call_user_func_array( 'parent::' . __FUNCTION__, func_get_args() );
			}
			else
			{
				throw $e;
			}
		}
	}
}
]]></hook></hooks><uninstall><![CDATA[<?php

$dropColumns = array(
	array( 'core_members', 'profile_private' ),
	array( 'core_members', 'profile_ban_members' ),
);

foreach( $dropColumns as $column )
{
	try
	{
		call_user_func_array( array( \IPS\Db::i(), 'dropColumn' ), $column );
	}
	catch(\Exception $e){}
}]]></uninstall><tasks/><widgets/><htmlFiles/><cssFiles/><jsFiles/><resourcesFiles/><lang><word key="profile_private" js="0">Профиль могут просматривать</word><word key="profile_private_0" js="0">Все</word><word key="profile_private_1" js="0">Только зарегистрированные пользователи</word><word key="profile_private_2" js="0">Пользователи которые подписаны на вас</word><word key="profile_private_3" js="0">Закрытый профиль</word><word key="profile_ban_members" js="0">Заблокировать пользователей</word><word key="profile_ban_members_desc" js="0">Укажите имена пользователей которых вы хотите заблокировать</word><word key="profile_private_members" js="0">Этот профиль могут просматривать только пользователи.</word><word key="profile_private_followers" js="0">Этот профиль доступен только подписчикам.</word><word key="profile_private_locked" js="0">Этот профиль закрыт для просмотра.</word><word key="profile_private_banned" js="0">Пользователь запретил вам просматривать свой профиль.</word><word key="profile_private_privacy" js="0">Приватность</word><word key="profile_private_title" js="0">Приватный профиль</word></lang><versions><version long="10000" human="1.0.0"><![CDATA[//<?php


/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * Install Code
 */
class ips_plugins_setup_install
{
	/**
	 * ...
	 *
	 * @return	array	If returns TRUE, upgrader will proceed to next step. If it returns any other value, it will set this as the value of the 'extra' GET parameter and rerun this step (useful for loops)
	 */
	public function step1()
	{
		$addColumns = array(
			array( 'core_members', array( 'name' => 'profile_private', 'type' => 'tinyint', 'length' => 1, 'unsigned' => true, 'allow_null' => false, 'default' => '0' ) ),
			array( 'core_members', array( 'name' => 'profile_ban_members', 'type' => 'varchar', 'length' => 255, 'allow_null' => FALSE, 'default' => "" ) )
		);
	
		foreach( $addColumns as $column )
		{
			try
			{
				call_user_func_array( array( \IPS\Db::i(), 'addColumn' ), $column );
			}
			catch( \Exception $e ){}
		}
	}
	
	// You can create as many additional methods (step2, step3, etc.) as is necessary.
	// Each step will be executed in a new HTTP request
}]]></version></versions></plugin>
